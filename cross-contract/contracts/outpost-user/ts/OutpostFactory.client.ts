/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, TxEncoding, ChannelOpenInitOptions, QueryMsg, ContractState, String } from "./OutpostFactory.types";
export interface OutpostFactoryReadOnlyInterface {
  contractAddress: string;
  getContractState: () => Promise<ContractState>;
  getUserOutpostAddress: ({
    userAddress
  }: {
    userAddress: string;
  }) => Promise<String>;
}
export class OutpostFactoryQueryClient implements OutpostFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getContractState = this.getContractState.bind(this);
    this.getUserOutpostAddress = this.getUserOutpostAddress.bind(this);
  }

  getContractState = async (): Promise<ContractState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_contract_state: {}
    });
  };
  getUserOutpostAddress = async ({
    userAddress
  }: {
    userAddress: string;
  }): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_outpost_address: {
        user_address: userAddress
      }
    });
  };
}
export interface OutpostFactoryInterface extends OutpostFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createOutpost: ({
    channelOpenInitOptions
  }: {
    channelOpenInitOptions: ChannelOpenInitOptions;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mapUserOutpost: ({
    outpostOwner
  }: {
    outpostOwner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OutpostFactoryClient extends OutpostFactoryQueryClient implements OutpostFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createOutpost = this.createOutpost.bind(this);
    this.mapUserOutpost = this.mapUserOutpost.bind(this);
  }

  createOutpost = async ({
    channelOpenInitOptions
  }: {
    channelOpenInitOptions: ChannelOpenInitOptions;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_outpost: {
        channel_open_init_options: channelOpenInitOptions
      }
    }, fee, memo, _funds);
  };
  mapUserOutpost = async ({
    outpostOwner
  }: {
    outpostOwner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      map_user_outpost: {
        outpost_owner: outpostOwner
      }
    }, fee, memo, _funds);
  };
}